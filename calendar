#!/bin/bash

function show_usage() {

    echo "usage: calendar [global arguments] ${1:-<command>} [command arguments]"
    echo ""

    command_prefix=""
    arg_prefix="  "
    if [ -z "$1" ]; then
        echo "commands:"
        command_prefix="  "
    fi
    if [ -z "$1" ] || [[ "$1" == "init" ]]; then
        echo -n "$command_prefix"
        echo "init" $'\t' $'\t' $'\t' $'\t' $'\t' "Initialize the calendar directory"
    fi
    if [ -z "$1" ] || [[ "$1" == "generate" ]]; then
        echo -n "$command_prefix"
        echo "generate" "[cmd args]" "<filename>" $'\t' "Generate a new calendar"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "-n|--name" $'\t' $'\t' $'\t' $'\t' "Specify name for calendar"
    fi
    if [ -z "$1" ] || [[ "$1" == "add_event" ]]; then
        echo -n "$command_prefix"
        echo "add_event" "[cmd args]" "<filename>" $'\t' "Generate a new calendar"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "-s|--summary" $'\t' $'\t' $'\t' "Specify name for calendar"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "-f|--freq|--frequency" $'\t' $'\t' "Specify frequency of event"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "--by-min|--by-minute" $'\t' $'\t' $'\t' "Specify event minute"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "--by-hour" $'\t' $'\t' $'\t' $'\t' "Specify event hour"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "--by-day" $'\t' $'\t' $'\t' $'\t' "Specify event day"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "--by-monthday" $'\t' $'\t' $'\t' "Specify event monthday"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "--by-week|--by-weekno" $'\t' $'\t' "Specify event weekno"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "--by-month" $'\t' $'\t' $'\t' $'\t' "Specify event month"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "--by-setpos|--by-set-position" $'\t' "Specify event repeat index"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "--week-start" $'\t' $'\t' $'\t' $'\t' "Specify which day of the week is the beginning (Sunday or Monday)"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "-i|--interval" $'\t' $'\t' $'\t' "Specify event repeat interval"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "-c|--count" $'\t' $'\t' $'\t' $'\t' "Specify event repeat count"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "-b|--begin" $'\t' $'\t' $'\t' $'\t' "Specify begin time for event"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "-e|--end" $'\t' $'\t' $'\t' $'\t' "Specify end time for event"
        echo -n "$command_prefix"
        echo -n "$arg_prefix"
        echo "-d|--description" $'\t' $'\t' $'\t' "Specify description for calendar event"
    fi
    if [ -z "$1" ] || [[ "$1" == "edit" ]]; then
        echo -n "$command_prefix"
        echo "edit" "<filename>" $'\t' $'\t' $'\t' "Edit raw calendar file"
    fi
    if [ -z "$1" ]; then
        echo -n "$command_prefix"
        echo "rm" "<filename>" $'\t' $'\t' $'\t' "Remove a file"
    fi
    if [ -z "$1" ]; then
        echo -n "$command_prefix"
        echo "ls" $'\t' $'\t' $'\t' $'\t' $'\t' "View directory structure"
    fi
    if [ -z "$1" ]; then
        echo -n "$command_prefix"
        echo "git" $'\t' $'\t' $'\t' $'\t' $'\t' "Wrapper to the complete git cli"
    fi

    echo ""
    echo "global arguments:"
    echo -n "$arg_prefix"
    echo "-p|--path" $'\t' $'\t' $'\t' $'\t' "Set the calendar directory to work with"

}

function cmd_init() {

    while ! [[ "$1" == "" ]]; do
        case "$1" in
            "-h"|"--help")
                show_usage "init"
                exit
                ;;
            *)
                echo "Unknown init parameter $1"
                show_usage "init"
                exit 1
                ;;
        esac
        shift
    done

    if [ -d "$working_path" ]; then
        echo "Cannot init: Already initialized"
        exit 1
    fi

    mkdir "$working_path"
    echo "Calendar store initialized"
    exit 0
}

function cmd_generate() {

    while ! [[ "$1" == "" ]]; do
        case "$1" in
            "-n"|"--name")
                shift
                cal_name="$1"
                ;;
            "-h"|"--help")
                show_usage "generate"
                exit
                ;;
            *)
                if [ -z "$filename" ]; then
                    filename="$1"
                else
                    echo "Unknown generate parameter $1"
                    show_usage "generate"
                    exit 1
                fi
                ;;
        esac
        shift
    done

    if [ -z "$filename" ]; then
        echo "A file must be specified"
        show_usage "generate"
        exit 1
    fi

    if [ -e "$working_path/$filename" ]; then
        echo "Cannot generate: Already exists"
        exit 1
    fi

    if [ -z "${filename%\/*}" ]&& ! [ -e "$working_path/${filename%\/*}" ]; then
        mkdir -p "$working_path/${filename%\/*}"
        err="$?"
        if ! [[ "$err" == "0" ]]; then
            echo "Cannot make directory ${filename%\/*}"
            exit "$err"
        fi
    fi

    {
        echo "BEGIN:VCALENDAR"
        if ! [ -z "$cal_name" ]; then
            echo "NAME:$cal_name"
            echo "X-WR-CALNAME:$cal_name"
        fi
        echo "VERSION:2.0"
        echo "PRODID:-//MilesBreslin//ShellCal//EN"
        generate_timezone

        echo "END:VCALENDAR"
    } > "$working_path/$filename"

    err="$?"
    if ! [[ "$err" == "0" ]]; then
        echo "Cannot generate file"
        exit "$?"
    fi

    if [[ "$err" == "0" ]]; then
        git_update "$filename" "Add calendar ${cal_name:-$filename}"
        err="$?"
    fi
    exit "$err"
}

function cmd_add_event() {
    while ! [[ "$1" == "" ]]; do
        case "$1" in
            "-s"|"--summary")
                shift
                event_summary="$1"
                ;;
            "-d"|"--description")
                shift
                event_description="$1"
                ;;
            "-f"|"--freq"|"--frequency")
                shift
                case "${1,,}" in
                    "min"|"minute"|"minutely")
                        event_freq="MINUTELY"
                        ;;
                    "h"|"hour"|"hourly")
                        event_freq="HOURLY"
                        ;;
                    "d"|"day"|"daily")
                        event_freq="DAILY"
                        ;;
                    "w"|"week"|"weekly")
                        event_freq="WEEKLY"
                        ;;
                    "m"|"mon"|"month"|"monthly")
                        event_freq="MONTHLY"
                        ;;
                    "y"|"year"|"yearly")
                        event_freq="YEARLY"
                        ;;
                    *)
                        echo "Unknown frequency $1"
                        exit 1
                        ;;
                esac
                ;;
            "--by-min"|"--by-minute")
                shift
                if [[ "$1" == "${1//[^0-9,]/}" ]]; then
                    echo "Mintues must be a comma-seperated positive integer type"
                    exit 1
                fi
                IFS=',' read -a minutes <<< "$1"
                for i in "${minutes[@]}" ; do
                    if (("$i">=60)) ; then
                        echo "Each minute must be less than 60"
                        exit 1
                    fi
                done
                event_bymin="$(<<< "${minutes[@]}" sed 's/\ /,/g')"
                ;;
            "--by-hour")
                shift
                if [[ "$1" == "${1//[^0-9,]/}" ]]; then
                    echo "Hours must be a comma-seperated positive integer type"
                    exit 1
                fi
                IFS=',' read -a hours <<< "$1"
                for i in "${hours[@]}" ; do
                    if (("$i">=24)) ; then
                        echo "Each hour must be less than 24"
                        exit 1
                    fi
                done
                event_byhour="$(<<< "${hours[@]}" sed 's/\ /,/g')"
                ;;
            "--by-day")
                shift
                IFS=',' read -a days <<< "$1"
                interpreted_days=($(weekday_interpreter "${days[@]}"))
                event_byday="$(<<< "${interpreted_days[@]}" sed 's/\ /,/g')"
                ;;
            "--by-monthday"|"--by-month-day")
                shift
                if [[ "$1" == "${1//[^0-9,]/}" ]]; then
                    echo "Monthday must be a comma-seperated positive integer type"
                    exit 1
                fi
                IFS=',' read -a monthday <<< "$1"
                for i in "${monthday[@]}" ; do
                    if (("$i">31)) || (("$i"==0)) ; then
                        echo "Each monthday must be less between 1 and 31"
                        exit 1
                    fi
                done
                event_bymonthday="$(<<< "${monthday[@]}" sed 's/\ /,/g')"
                ;;
            "--by-week"|"--by-weekno")
                shift
                if [[ "$1" == "${1//[^0-9,]/}" ]]; then
                    echo "Week number must be a comma-seperated positive integer type"
                    exit 1
                fi
                IFS=',' read -a weeks <<< "$1"
                for i in "${weeks[@]}" ; do
                    if (("$i">=53)) ; then
                        echo "Each week must be less than 53"
                        exit 1
                    fi
                done
                event_byweekno="$(<<< "${weeks[@]}" sed 's/\ /,/g')"
                ;;
            "--by-month")
                shift
                IFS=',' read -a months <<< "$1"
                interpreted_month=($(month_interpreter "${months[@]}"))
                event_bymonth="$(<<< "${months[@]}" sed 's/\ /,/g')"
                ;;
            "--by-setpos"|"--by-set-pos"|"--by-set-position")
                shift
                if [[ "$1" == "${1//[^-0-9,]/}" ]]; then
                    echo "Set position must be a comma-seperated integer type"
                    exit 1
                fi
                IFS=',' read -a pos <<< "$1"
                event_bysetpos="$(<<< "${pos[@]}" sed 's/\ /,/g')"
                ;;
            "--week-start")
                shift
                event_wkstart="$(weekday_interpreter "$1")"
                event_wkstart="${event_wkstart//\n/}"
                ;;
            "-i"|"--interval")
                shift
                if ! [[ "$1" == "${1//[^0-9]/}" ]]; then
                    echo "Interval must be an integer type"
                    exit 1
                fi
                event_interval="$1"
                ;;
            "-c"|"--count")
                shift
                if ! [[ "$1" == "${1//[^0-9]/}" ]]; then
                    echo "Count must be an integer type"
                    exit 1
                fi
                event_count="$1"
                ;;
            "-b"|"--begin"|"--start")
                shift
                event_start="$(date --date="$1" --rfc-822)"
                ;;
            "-e"|"--end"|"--stop")
                shift
                event_stop="$(date --date="$1" --rfc-822)"
                ;;
            "-h"|"--help")
                show_usage "add_event"
                exit
                ;;
            *)
                if [ -z "$filename" ]; then
                    filename="$1"
                else
                    echo "Unknown add_event parameter $1"
                    show_usage "add_event"
                    exit 1
                fi
                ;;
        esac
        shift
    done

    if ! [ -e "$working_path/$filename" ]; then
        echo "Cannot create event: File does not exist"
        exit 1
    fi

    if [ -z "$event_start" ] || [ -z "$event_stop" ]; then
        echo "Cannot create event: Must have begin and end times"
        exit 1
    fi

    if [ -z "$event_summary" ]; then
        echo "Cannot create event: Must have summary"
        exit 1
    fi

    {
        echo "BEGIN:VEVENT"
        echo "CREATED:$(date -u '+%Y%m%dT%H%M%SZ')"
        echo "UID:ShellCal_$RANDOM"
        if ! [ -z "$event_summary" ]; then
            echo "SUMMARY:$event_summary"
        fi
        if ! [ -z "$event_description" ]; then
            echo "DESCRIPTION:$event_description"
        fi
        if ! [ -z "$event_freq" ]; then
            echo -n "RRULE:FREQ=$event_freq"
            if ! [ -z "$event_bymin" ]; then
                echo -n ";BYMINUTE=$event_bymin"
            fi
            if ! [ -z "$event_byhour" ]; then
                echo -n ";BYHOUR=$event_byhour"
            fi
            if ! [ -z "$event_byday" ]; then
                echo -n ";BYDAY=$event_byday"
            fi
            if ! [ -z "$event_bymonthday" ]; then
                echo -n ";BYMONTHDAY=$event_bymonthday"
            fi
            if ! [ -z "$event_byweekno" ]; then
                echo -n ";BYWEEKNO=$event_byweekno"
            fi
            if ! [ -z "$event_bymonth" ]; then
                echo -n ";BYMONTH=$event_bymonth"
            fi
            if ! [ -z "$event_bysetpos" ]; then
                echo -n ";BYSETPOS=$event_bysetpos"
            fi
            if ! [ -z "$event_wkstart" ]; then
                echo -n ";WKST=$event_wkstart"
            fi
            if ! [ -z "$event_interval" ]; then
                echo -n ";INTERVAL=$event_interval"
            fi
            if ! [ -z "$event_count" ]; then
                echo -n ";COUNT=$event_count"
            fi
            echo ""
        fi
        echo "DTSTART;TZID=$(date '+%Z'):$(date --date="$event_start" -u '+%Y%m%dT%H%M%SZ')"
        echo "DTEND:$(date --date="$event_stop" -u '+%Y%m%dT%H%M%SZ')"
        echo "END:VEVENT"
    } | append_to_calendar "$working_path/$filename" 
    err="$?"

    if [[ "$err" == "0" ]]; then
        git_update "$filename" "Add event $event_summary"
        err="$?"
    fi
    exit "$err"
}

function weekday_interpreter() {
    for i in "$@"; do
        case "${i,,}" in
            "su"*)
                echo "SU"
                ;;
            "m"*)
                echo "MO"
                ;;
            "tu"*)
                echo "TU"
                ;;
            "w"*)
                echo "WE"
                ;;
            "th"*)
                echo "TH"
                ;;
            "f"*)
                echo "FR"
                ;;
            "sa"*)
                echo "SA"
                ;;
            *)
                echo "Unknown weekday $i" >&2
                exit 1
                ;;
        esac
    done
}

function month_interpreter() {
    for i in "$@"; do
        case "${i,,}" in
            "ja"*)
                echo "1"
                ;;
            "f"*)
                echo "2"
                ;;
            "mar"*)
                echo "3"
                ;;
            "ap"*)
                echo "4"
                ;;
            "may")
                echo "5"
                ;;
            "jun"*)
                echo "6"
                ;;
            "jul"*)
                echo "7"
                ;;
            "au"*)
                echo "8"
                ;;
            "s"*)
                echo "9"
                ;;
            "o"*)
                echo "10"
                ;;
            "n"*)
                echo "11"
                ;;
            "d"*)
                echo "12"
                ;;
            *)
                if [[ "$i" == "${i//[^0-9]/}" ]]; then
                    if (("$i"<=12)) && (("$i"!=0)); then
                        echo "$i"
                    else
                        echo "Month integer must be between 1 and 12" >&2
                        exit 1
                    fi
                else
                    echo "Invalid month $i" >&2
                    exit 1
                fi
                ;;
        esac
    done
}

function append_to_calendar() {
    if ! [ -e "$1" ]; then
        echo "Cannot append to calendar: File does not exist"
        exit 1
    fi

    FILE_CONTENTS=$({
        awk 'BEGIN{f=1} /END:VCALENDAR/ {f=0} f' "$1"
        cat
        awk 'BEGIN{f=0} /END:VCALENDAR/ {f=1} f' "$1"
    })

    <<< "$FILE_CONTENTS" cat > "$1"
}

function prepend_to_calendar() {
    if ! [ -e "$1" ]; then
        echo "Cannot prepend to calendar: File does not exist"
        exit 1
    fi

    FILE_CONTENTS=$({
        awk 'BEGIN{f=1} f {print} /PRODID:/ {f=0}' "$1"
        cat
        awk 'BEGIN{f=0} f {print} /PRODID:/ {f=1}' "$1"
    })

    <<< "$FILE_CONTENTS" cat > "$1"
}

function ensure_zone_exists() {
    if ! [ -e "$1" ]; then
        echo "Cannot ensure timezone exists on calendar: File does not exist"
        exit 1
    fi
    # If timezone has not been specified; Not currently functional
    if < "$1" awk \
        "   BEGIN{f=1} 
            /BEGIN:VTIMEZONE/ {TZ=1}
            /END:VTIMEZONE/ {TZ=0}
            TZ && /TZID=$(date '+%Z')/ {f=0}
            END {exit f}"
    then
        echo "TIMEZONE DOES NOT EXIST"
        generate_timezone | prepend_to_calendar "$1"
    fi

}

function generate_timezone() {
    echo "BEGIN:VTIMEZONE"
    echo "TZID:$(date "+%Z")"
    echo "BEGIN:STANDARD"
    echo "DTSTART:16011104T020000"
    echo "RRULE:FREQ=YEARLY;BYDAY=1SU;BYMONTH=11"
    echo "TZOFFSETFROM:$(date --date="jun 1" '+%z')"
    echo "TZOFFSETTO:$(date --date="jan 1" '+%z')"
    echo "END:STANDARD"
    echo "BEGIN:DAYLIGHT"
    echo "DTSTART:16010311T020000"
    echo "RRULE:FREQ=YEARLY;BYDAY=2SU;BYMONTH=3"
    echo "TZOFFSETFROM:$(date --date="jan 1" '+%z')"
    echo "TZOFFSETTO:$(date --date="jun 1" '+%z')"
    echo "END:DAYLIGHT"
    echo "END:VTIMEZONE"
}

function git_update() {
    if [ -w "$working_path/.git" ]; then
        git -C "$working_path" add "$working_path/$1"
        git -C "$working_path" commit -m "$2"
        err="$?"
        if [[ "$GIT_PUSH" == "1" ]]; then
            git -C "$working_path" push
            return "$?"
        fi
        return "$err"
    fi
    return 0
}

working_path="$HOME/.calendar"

while ! [[ "$1" == "" ]]; do
    case "$1" in
        "init")
            shift
            cmd_init "$@"
            exit "$?"
            ;;
        "ls")
            shift
            cd "$working_path"
            ls "$@"
            exit "$?"
            ;;
        "rm")
            shift
            cd "$working_path"
            if [ -w "$working_path/.git" ]; then
                git rm "$@"
                git commit -m "Remove file $@"
                if [[ "$GIT_PUSH" == "1" ]]; then
                    git push
                fi
            else
                rm "$@"
            fi
            exit "$?"
            ;;
        "edit")
            shift
            cd "$working_path"
            nano "$@"
            exit "$?"
            ;;
        "generate")
            shift
            cmd_generate "$@"
            exit "$?"
            ;;
        "add_event")
            shift
            cmd_add_event "$@"
            exit "$?"
            ;;
        "git")
            shift
            cd "$working_path"
            git "$@"
            exit "$?"
            ;;
        "--path"|"-p")
            shift
            working_path="$1"
            ;;
        "-h"|"--help")
            show_usage
            ;;
        *)
            echo "Unknown parameter $1"
            show_usage
            exit 1
            ;;
    esac
    shift
done

show_usage